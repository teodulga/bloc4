{
  "version": 3,
  "sources": [
    "../app.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AA+BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAqEK;;AAAA;AAAA;AAAA;;AAAA;AArEL;;;AAqEK;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA5CL;;;AAAA;;;AAAA;;;AAAA;AA4CK;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAxBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AANL;;;AAMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANL;;AAAA;;;;;;;;;AAMA;;;AAUW;;AAAA;AAAA;;AAAA;;;AAE+B;;AAAZ;AADM;;;;AAAA;AAGZ;;;;;;;;;;AAHY;AAAA;;AAAA;AAAd;;AAAV;AAAA;;AAAA;AAAA;AAKa;;AAAV;AAAA;AAAP;AAER;;;AAWY;;AAAA;;AAAoB;;AAApB;AADJ;AAGO;;AAAA;;AAAA;AAAA;AAAA;;AAAP;AAGI;AAAA;AAAA;AAAA;AAAA;AAA2C;;AAAA;;AAA3C;AADgC;AAApC;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAGO;AAAA;AAAA;;;AAAP;AAER;;;AAQe;;AAAA;AAAA;;AAAP;AACmB;AAAZ;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAEyB;;AAAV;AAAA;AAAA;AAAA;AACD;AAAA;AAAA;AAAA;;AAAA;AACU;;AAAS;AAA1B;AAAA;AAAP;AAG4C;AAAZ;AAAtB;;AAAV;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAG0B;;AAAA;;AAAA;AAAV;AACI;;;;;;;;;;;;AAAjB;AAAA;AAAA;AAAA;AAAA;;AAAX;;;AACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;;AAEZ;;;AAQY;;AAAc;;AAAd;AADJ;AAGqB;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAV;AAAX;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "app.Game.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 10"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 \"asset\""
    },
    "19": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "21": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "24": {
      "op": "pushbytess 0x1431f856 0xec476dbd 0x828f30d3 0x69f5c863 // method \"register(string)(uint64,string,uint64)\", method \"fund_account(pay)uint64\", method \"buy_asset(byte[],uint64)void\", method \"admin_upsert_asset((string,string,uint64))void\"",
      "defined_out": [
        "Method(admin_upsert_asset((string,string,uint64))void)",
        "Method(buy_asset(byte[],uint64)void)",
        "Method(fund_account(pay)uint64)",
        "Method(register(string)(uint64,string,uint64))"
      ],
      "stack_out": [
        "Method(register(string)(uint64,string,uint64))",
        "Method(fund_account(pay)uint64)",
        "Method(buy_asset(byte[],uint64)void)",
        "Method(admin_upsert_asset((string,string,uint64))void)"
      ]
    },
    "46": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(admin_upsert_asset((string,string,uint64))void)",
        "Method(buy_asset(byte[],uint64)void)",
        "Method(fund_account(pay)uint64)",
        "Method(register(string)(uint64,string,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(register(string)(uint64,string,uint64))",
        "Method(fund_account(pay)uint64)",
        "Method(buy_asset(byte[],uint64)void)",
        "Method(admin_upsert_asset((string,string,uint64))void)",
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "match main_register_route@5 main_fund_account_route@6 main_buy_asset_route@7 main_admin_upsert_asset_route@8",
      "stack_out": []
    },
    "59": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "60": {
      "op": "return",
      "stack_out": []
    },
    "61": {
      "block": "main_admin_upsert_asset_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "63": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "64": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "65": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "67": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "68": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "71": {
      "callsub": "app.Game.admin_upsert_asset",
      "op": "callsub admin_upsert_asset",
      "stack_out": []
    },
    "74": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "75": {
      "op": "return",
      "stack_out": []
    },
    "76": {
      "block": "main_buy_asset_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "78": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "79": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "80": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "82": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "83": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "86": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "92": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "93": {
      "callsub": "app.Game.buy_asset",
      "op": "callsub buy_asset",
      "stack_out": []
    },
    "96": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "97": {
      "op": "return",
      "stack_out": []
    },
    "98": {
      "block": "main_fund_account_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "100": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "101": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "102": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "104": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "105": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "107": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "108": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "109": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "110": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "112": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "113": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "114": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "115": {
      "callsub": "app.Game.fund_account",
      "op": "callsub fund_account",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "118": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%15#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "121": {
      "op": "log",
      "stack_out": []
    },
    "122": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "block": "main_register_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "126": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "127": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "130": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "131": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "134": {
      "callsub": "app.Game.register",
      "op": "callsub register",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "137": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "138": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "139": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "140": {
      "op": "log",
      "stack_out": []
    },
    "141": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "142": {
      "op": "return",
      "stack_out": []
    },
    "143": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "145": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "150": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "151": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "152": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "153": {
      "op": "return",
      "stack_out": []
    },
    "154": {
      "subroutine": "app.Game.register",
      "params": {
        "name#0": "bytes"
      },
      "block": "register",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "157": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "159": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "160": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "162": {
      "op": "bnz register_after_if_else@2",
      "stack_out": []
    },
    "165": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "167": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "168": {
      "op": "pushbytes 0x0012",
      "defined_out": [
        "0x0012",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x0012"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "173": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "183": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "184": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "name#0 (copy)"
      ]
    },
    "186": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "187": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ]
    },
    "189": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "190": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0",
        "{box_del}"
      ]
    },
    "191": {
      "op": "pop",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "193": {
      "op": "box_put",
      "stack_out": []
    },
    "194": {
      "block": "register_after_if_else@2",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "196": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "197": {
      "error": "check self.user entry exists",
      "op": "assert // check self.user entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "198": {
      "retsub": true,
      "op": "retsub"
    },
    "199": {
      "subroutine": "app.Game.fund_account",
      "params": {
        "payment#0": "uint64"
      },
      "block": "fund_account",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "202": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "204": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "209": {
      "error": "Payment receiver must be the application address",
      "op": "assert // Payment receiver must be the application address",
      "stack_out": []
    },
    "210": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "212": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "214": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "215": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "216": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "218": {
      "error": "User must be registered",
      "op": "assert // User must be registered",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "219": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "220": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "221": {
      "error": "check self.user entry exists",
      "op": "assert // check self.user entry exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "222": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "10"
      ]
    },
    "223": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "224": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%3#0",
        "tmp%8#0",
        "payment#0 (copy)"
      ]
    },
    "226": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "228": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "to_encode%0#0"
      ]
    },
    "229": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "230": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "val_as_bytes%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "232": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "233": {
      "error": "check self.user entry exists",
      "op": "assert // check self.user entry exists",
      "stack_out": [
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "235": {
      "op": "replace2 10",
      "defined_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "237": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "239": {
      "op": "box_del",
      "defined_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "240": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "241": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "244": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "245": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "246": {
      "error": "check self.user entry exists",
      "op": "assert // check self.user entry exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "247": {
      "error": "Index access is out of bounds",
      "op": "extract 10 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "250": {
      "retsub": true,
      "op": "retsub"
    },
    "251": {
      "subroutine": "app.Game.buy_asset",
      "params": {
        "asset_id#0": "bytes",
        "quantity#0": "uint64"
      },
      "block": "buy_asset",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "254": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "257": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "259": {
      "error": "User must be registered",
      "op": "assert // User must be registered",
      "stack_out": []
    },
    "260": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\""
      ],
      "stack_out": [
        "\"asset\""
      ]
    },
    "261": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"asset\"",
        "asset_id#0 (copy)"
      ],
      "stack_out": [
        "\"asset\"",
        "asset_id#0 (copy)"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "264": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "265": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "266": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "268": {
      "error": "Invalid asset ID",
      "op": "assert // Invalid asset ID",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "269": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "271": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "272": {
      "error": "check self.user entry exists",
      "op": "assert // check self.user entry exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0"
      ]
    },
    "273": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0",
        "10"
      ]
    },
    "274": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0",
        "user_balance#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "user_balance#0"
      ]
    },
    "275": {
      "op": "swap",
      "stack_out": [
        "user_balance#0",
        "tmp%2#0"
      ]
    },
    "276": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "user_balance#0"
      ],
      "stack_out": [
        "user_balance#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "277": {
      "error": "check self.asset entry exists",
      "op": "assert // check self.asset entry exists",
      "stack_out": [
        "user_balance#0",
        "maybe_value%3#0"
      ]
    },
    "278": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "maybe_value%3#0",
        "user_balance#0"
      ],
      "stack_out": [
        "user_balance#0",
        "maybe_value%3#0",
        "4"
      ]
    },
    "280": {
      "op": "extract_uint64",
      "defined_out": [
        "asset_price#0",
        "user_balance#0"
      ],
      "stack_out": [
        "user_balance#0",
        "asset_price#0"
      ]
    },
    "281": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_price#0",
        "quantity#0 (copy)",
        "user_balance#0"
      ],
      "stack_out": [
        "user_balance#0",
        "asset_price#0",
        "quantity#0 (copy)"
      ]
    },
    "283": {
      "op": "*",
      "defined_out": [
        "total#0",
        "user_balance#0"
      ],
      "stack_out": [
        "user_balance#0",
        "total#0"
      ]
    },
    "284": {
      "op": "dup2",
      "defined_out": [
        "total#0",
        "total#0 (copy)",
        "user_balance#0",
        "user_balance#0 (copy)"
      ],
      "stack_out": [
        "user_balance#0",
        "total#0",
        "user_balance#0 (copy)",
        "total#0 (copy)"
      ]
    },
    "285": {
      "op": ">=",
      "defined_out": [
        "tmp%8#0",
        "total#0",
        "user_balance#0"
      ],
      "stack_out": [
        "user_balance#0",
        "total#0",
        "tmp%8#0"
      ]
    },
    "286": {
      "error": "Insufficient funds",
      "op": "assert // Insufficient funds",
      "stack_out": [
        "user_balance#0",
        "total#0"
      ]
    },
    "287": {
      "op": "-",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "288": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "289": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%9#0"
      ]
    },
    "291": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "292": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%9#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "293": {
      "error": "check self.user entry exists",
      "op": "assert // check self.user entry exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%9#0",
        "maybe_value%4#0"
      ]
    },
    "294": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "296": {
      "op": "replace2 10",
      "defined_out": [
        "tmp%9#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "updated_data%0#0"
      ]
    },
    "298": {
      "op": "dig 1",
      "stack_out": [
        "tmp%9#0",
        "updated_data%0#0",
        "tmp%9#0 (copy)"
      ]
    },
    "300": {
      "op": "box_del",
      "defined_out": [
        "tmp%9#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%9#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "301": {
      "op": "pop",
      "stack_out": [
        "tmp%9#0",
        "updated_data%0#0"
      ]
    },
    "302": {
      "op": "box_put",
      "stack_out": []
    },
    "303": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "305": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%11#0",
        "asset_id#0 (copy)"
      ]
    },
    "307": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "308": {
      "op": "sha256",
      "defined_out": [
        "user_asset_id#0"
      ],
      "stack_out": [
        "user_asset_id#0"
      ]
    },
    "309": {
      "op": "pushbytes \"user_asset\"",
      "defined_out": [
        "\"user_asset\"",
        "user_asset_id#0"
      ],
      "stack_out": [
        "user_asset_id#0",
        "\"user_asset\""
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "\"user_asset\"",
        "user_asset_id#0"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "323": {
      "op": "dup",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%13#0"
      ]
    },
    "324": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "325": {
      "op": "bury 1",
      "stack_out": [
        "tmp%13#0",
        "maybe_exists%5#0"
      ]
    },
    "327": {
      "op": "bz buy_asset_else_body@2",
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "330": {
      "op": "dup",
      "defined_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "331": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "332": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ]
    },
    "333": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value_converted%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "maybe_exists%6#0",
        "maybe_value_converted%0#0"
      ]
    },
    "334": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "maybe_value_converted%0#0",
        "maybe_exists%6#0"
      ]
    },
    "335": {
      "error": "check self.user_asset entry exists",
      "op": "assert // check self.user_asset entry exists",
      "stack_out": [
        "tmp%13#0",
        "maybe_value_converted%0#0"
      ]
    },
    "336": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%13#0",
        "maybe_value_converted%0#0",
        "quantity#0 (copy)"
      ]
    },
    "338": {
      "op": "+",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "new_box_value%0#0"
      ]
    },
    "339": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "new_box_value%1#0"
      ]
    },
    "340": {
      "op": "box_put",
      "stack_out": []
    },
    "341": {
      "retsub": true,
      "op": "retsub"
    },
    "342": {
      "block": "buy_asset_else_body@2",
      "stack_in": [
        "tmp%13#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "quantity#0 (copy)"
      ],
      "stack_out": [
        "tmp%13#0",
        "quantity#0 (copy)"
      ]
    },
    "344": {
      "op": "itob",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "new_box_value%2#0"
      ]
    },
    "345": {
      "op": "box_put",
      "stack_out": []
    },
    "346": {
      "retsub": true,
      "op": "retsub"
    },
    "347": {
      "subroutine": "app.Game.admin_upsert_asset",
      "params": {
        "asset#0": "bytes"
      },
      "block": "admin_upsert_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "350": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "352": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "354": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "355": {
      "error": "Only the creator can call this method",
      "op": "assert // Only the creator can call this method",
      "stack_out": []
    },
    "356": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "358": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)",
        "0"
      ]
    },
    "359": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0"
      ]
    },
    "360": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%0#0",
        "asset#0 (copy)"
      ]
    },
    "362": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "asset#0 (copy)",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "asset#0 (copy)",
        "2"
      ]
    },
    "364": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "365": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "asset#0 (copy)"
      ]
    },
    "367": {
      "op": "cover 2",
      "stack_out": [
        "asset#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "369": {
      "op": "substring3",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "370": {
      "op": "sha256",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "371": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"asset\""
      ]
    },
    "372": {
      "op": "swap",
      "stack_out": [
        "\"asset\"",
        "tmp%4#0"
      ]
    },
    "373": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "374": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "375": {
      "op": "box_del",
      "defined_out": [
        "tmp%5#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "376": {
      "op": "pop",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "377": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%5#0",
        "asset#0 (copy)"
      ]
    },
    "379": {
      "op": "box_put",
      "stack_out": []
    },
    "380": {
      "retsub": true,
      "op": "retsub"
    }
  }
}